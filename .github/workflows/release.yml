name: Release
run-name: "Release Milestone #${{ inputs.milestone }} ${{ inputs.prerelease }}"
on:
  workflow_dispatch:
    inputs:
      milestone:
        required: true
        description: Milestone Number
        type: number
      prerelease:
        required: false
        description: Prerelease
        type: string

concurrency:
  group: workflow-${{ github.workflow }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.result }}
      changelog: ${{ steps.changelog.outputs.result }}
    concurrency:
      group: ref-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Validate Input
        id: version
        uses: actions/github-script@v7
        with:
          # language=javascript
          script: |
            let milestone;
            let failed = false;
            try {
                milestone = await github.rest.issues.getMilestone({
                    owner: context.payload.repository.owner.login,
                    repo: context.payload.repository.name,
                    milestone_number: context.payload.inputs.milestone,
                });
            } catch {
                core.setFailed(`Milestone #${context.payload.inputs.milestone} not found.`);
                return;
            }
            if (milestone.data.state !== "open") {
                core.setFailed(`Milestone ${milestone.data.title} is already closed.`);
                failed = true;
            }
            if (milestone.data.closed_issues === 0) {
                core.warning(`Milestone ${milestone.data.title} has 0 closed issues/PRs.`);
            }
            if (context.payload.inputs.prerelease === undefined && milestone.data.open_issues !== 0) {
                core.setFailed(`Milestone ${milestone.data.title} still has ${milestone.data.open_issues} open issues/PRs. Consider making a prerelease instead.`);
                failed = true;
            }
            if (!/^v\d+\.\d+\.\d+$/.test(milestone.data.title)) {
                core.setFailed(`Milestone title ${milestone.data.title} must conform to the pattern ^v\\d+\\.\\d+\\.\\d+$.`);
                failed = true;
            }
            if (context.payload.inputs.prerelease !== undefined && !/^[a-z]+(\.([a-z]+|\d+))+$/.test(context.payload.inputs.prerelease)) {
                core.setFailed(`Prerelease ${context.payload.inputs.prerelease} must conform to the pattern ^[a-z]+(\\.([a-z]+|\\d+))*$.`);
                failed = true;
            }
            if (failed) {
                return;
            }
            if (context.payload.inputs.prerelease === undefined) {
                await github.rest.issues.updateMilestone({
                    owner: context.payload.repository.owner.login,
                    repo: context.payload.repository.name,
                    milestone_number: milestone.data.number,
                    state: "closed",
                });
            }
            if (context.payload.inputs.prerelease !== undefined) {
                return `${milestone.data.title.substring(1)}-${context.payload.inputs.prerelease}`;
            }
            return milestone.data.title.substring(1);
          result-encoding: string
      - name: Collate Changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          # language=javascript
          script: |
            const prerelease = context.payload.inputs.prerelease !== undefined;
            const issues = await github.rest.issues.listForRepo({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                milestone: context.payload.inputs.milestone,
                state: "closed",
                sort: "created",
                direction: "asc",
                per_page: 100,
            });
            const sections = {};
            for (const issue of issues.data) {
                const inPrerelease = issue.labels.find(({name}) => name === "in-prerelease") !== undefined; 
                if (prerelease && inPrerelease || issue.state_reason === "not_planned" || issue.pull_request?.merged_at === null) {
                    continue;
                }
                if (prerelease) {
                    await github.rest.issues.addLabels({
                        owner: context.payload.repository.owner.login,
                        repo: context.payload.repository.name,
                        issue_number: issue.number,
                        labels: ["in-prerelease"]
                    });
                } else if (inPrerelease) {
                    await github.rest.issues.removeLabel({
                        owner: context.payload.repository.owner.login,
                        repo: context.payload.repository.name,
                        issue_number: issue.number,
                        name: "in-prerelease"
                    });
                }
                if (!issue.body.includes("# Changelog")) {
                    continue;
                }
                const changelog = issue.body.split("# Changelog")[1].trim();
                let section = null;
                for (const line of changelog.split("\n")) {
                    if (!line.trim()) {
                        continue;
                    }
                    if (line.startsWith("## ")) {
                        section = line.substring(3).trim();
                        if (sections[section] === undefined) {
                            sections[section] = [];
                        }
                        continue;
                    }
                    sections[section].push(line.trim());
                }
            }
            let changelog = "";
            if (sections[null]) {
                changelog += sections[null].join("\n");
            }
            for (const section in sections) {
                if (section === null || sections[section].length === 0) {
                    continue;
                }
                changelog += `\n\n## ${section}\n`;
                changelog += sections[section].join("\n");
            }
            core.summary.addRow("# Changelog\n");
            core.summary.addRaw(changelog.trim());
            core.summary.write();
            return changelog.trim();
          result-encoding: string
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}
      - name: Setup Git
        # language=bash
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Pull Weblate Changes
        continue-on-error: true
        # language=bash
        run: |
          git pull https://hosted.weblate.org/git/minecraft-access/mod/
      - name: Update Changelog
        if: "!inputs.prerelease"
        env:
          CHANGELOG: ${{ steps.changelog.outputs.result }}
        # language=bash
        run: |
          changelog=${CHANGELOG//$'\n'/\\n}
          changelog=${changelog//## /### }
          sed "/<!-- INSERT CHANGELOG HERE -->/a\\\\n## Release v${{ steps.version.outputs.result }} ($(date +%Y-%m))\n${changelog}" -i ./docs/changelog.md
          git add ./docs/changelog.md
          git commit -m "Updated changelog for v${{ steps.version.outputs.result }}" --trailer "Co-authored-by=${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>"
      - name: Tag
        env:
          CHANGELOG: ${{ steps.changelog.outputs.result }}
        # language=bash
        run: |
          git tag "v${{ steps.version.outputs.result }}" -m "$CHANGELOG" --trailer "Released-by=@${{ github.actor }}"
      - name: Push Changes
        # language=bash
        run: |
          git push --follow-tags
  build:
    name: Build
    needs:
      - prepare
    uses: ./.github/workflows/build.yml
    with:
      ref: ${{ github.ref }}
  release:
    name: Release (${{ matrix.loader.name }})
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        loader:
          - name: Fabric
            slug: fabric
          - name: NeoForge
            slug: neoforge
    steps:
      - uses: actions/download-artifact@v4
      - uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{ vars.MODRINTH_ID }}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          curseforge-id: ${{ vars.CURSEFORGE_ID }}
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}
          github-tag: v${{ needs.prepare.outputs.version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-name: Minecraft Access v${{ needs.prepare.outputs.version }}
          files: ./minecraft-access/*+${{ matrix.loader.slug }}.jar
          name: Minecraft Access v${{ needs.prepare.outputs.version }} for ${{ matrix.loader.name }}
          version: ${{ needs.prepare.outputs.version }}+${{ matrix.loader.slug }}
          changelog: ${{ needs.prepare.outputs.changelog }}
  discord-builds:
    name: Publish Build on Discord
    needs:
      - prepare
      - build
    uses: ./.github/workflows/publish-build.yml
    secrets: inherit
    with:
      title: "Release v${{ needs.prepare.outputs.version }}"
      tag: ${{ inputs.prerelease && vars.PRERELEASE_TAG || vars.RELEASE_TAG }}
      colour: ${{ inputs.prerelease && 16562691 || 2520391 }}
      url: "https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare.outputs.version }}"
      message: ${{ inputs.prerelease && vars.PRERELEASE_BUILD_MESSAGE || vars.RELEASE_BUILD_MESSAGE }}
      description: ${{ needs.prepare.outputs.changelog }}
      # language=json
      fields: |
        [
          {
            "name": "Downloads",
            "value": "GitHub: [Fabric & NeoForge](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare.outputs.version }})\nModrinth: [Fabric](https://modrinth.com/mod/${{ vars.MODRINTH_PROJECT }}/version/${{ needs.prepare.outputs.version }}+fabric) [NeoForge](https://modrinth.com/mod/${{ vars.MODRINTH_PROJECT }}/version/${{ needs.prepare.outputs.version }}+neoforge)",
            "inline": false
          }
        ]
  discord-announcement:
    name: Announce on Discord
    needs:
      - prepare
      - release
    runs-on: ubuntu-latest
    if: "!inputs.prerelease"
    steps:
      - name: Announce on Discord
        env:
          CHANGELOG: ${{ needs.prepare.outputs.changelog }}
        # language=bash
        run: |
          jq -nc \
            --arg version "${{ needs.prepare.outputs.version }}" \
            --arg message "${{ vars.RELEASE_ANNOUNCEMENT_MESSAGE }}" \
            --arg author "${{ github.actor }}" \
            --arg owner "${{ github.repository_owner }}" \
            --arg repo "${{ github.repository }}" \
            --arg changelog "$CHANGELOG" \
            --arg modrinth_project "${{ vars.MODRINTH_PROJECT }}" \
            '{
              "content": $message,
              "embeds": [
                {
                  "title": "Release v\($version)",
                  "color": 2520391,
                  "fields": [
                    {
                      "name": "Downloads",
                      "value": "GitHub: [Fabric & NeoForge](https://github.com/\($repo)/releases/tag/v\($version))\nModrinth: [Fabric](https://modrinth.com/mod/\($modrinth_project)/version/\($version)+fabric) [NeoForge](https://modrinth.com/mod/\($modrinth_project)/version/\($version)+neoforge)",
                      "inline": false
                    }
                  ],
                  "description": $changelog,
                  "url": "https://github.com/\($repo)/releases/tag/v\($version)",
                  "author": {
                    "name": $author,
                    "url": "https://github.com/\($author)",
                    "icon_url": "https://github.com/\($author).png"
                  },
                  "thumbnail": {
                    "url": "https://github.com/\($owner).png"
                  }
                }
              ]
            }' \
          | curl --fail-with-body -X POST ${{ secrets.ANNOUNCEMENTS_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d @-
