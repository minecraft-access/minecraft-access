plugins {
    alias(libs.plugins.shadow)
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    // Loom sets the log4j config while in development (in prod the log4j config might be dictated by the launcher or just the game itself).
    // This loom gradle config specifies that loom uses our customized log4j config file.
    // ref: https://fabricmc.net/wiki/documentation:fabric_loom
    // (although we're using the architectury fork of fabric loom, this config remains unchanged)
    log4jConfigs.from(file("../common/src/main/resources/log4j.xml"))
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation libs.fabricLoader

    modRuntimeOnly libs.fabricApi
    include libs.fabricApi

    modRuntimeOnly libs.architecturyApiFabric
    include libs.architecturyApiFabric

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand Map.of("version", project.version,
                "fabric_loader_version", libs.fabricLoader.get().version,
                "fabric_api_version", libs.fabricApi.get().version,
                "architectury_api_version", libs.architecturyApiFabric.get().version,
                "jade_fabric_version", libs.jadeFabric.get().version,
                "minecraft_version", libs.minecraft.get().version)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
